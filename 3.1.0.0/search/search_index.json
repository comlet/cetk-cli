{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"<p>comlet's Embedded TestKit (cETK) is a platform independent (embedded) test automation solution and Robotic Process Automation (RPA) environment which consists of the following parts:</p> <p></p> <p>Main emphasis of test automation with Embedded TestKit (but not limited to) is black-box and end-to-end testing.</p> <p>The architecture of Embedded TestKit inherits from the generic Test Automation Architecture (gTAA) as described by ISTQB(tm) in their Advanced Level Syllabus for Test Automation Engineer.</p> Key ConceptsKey FeaturesKey Properties <ul> <li>Control Environment<ul> <li>Robot Framework as Test Automation Framework</li> <li>Python</li> <li>Tidy as test source beautifier</li> <li>KeePass Library for managing secrets</li> <li>Robocop for static (test) source code analysis</li> <li>Optional<ul> <li>Thirdparty/external technology/device driver libraries</li> <li>comlet Embedded Libraries (cEL)</li> </ul> </li> </ul> </li> <li>Source Home @ Home Folder</li> <li>Command Line Interface \"cetk-cli\"</li> <li>comlet Embedded Simulation Devices (cESD)</li> <li>Frontend to define test cases according to ISO29119-5 (provided by Robot Framework)</li> </ul> <ul> <li>Embedded Ready via cESD</li> <li>Keyword-Driven (ISO29119-5)</li> <li>Test-Driven</li> <li>Continuous Testing (by integration with a CI/CD processor)</li> <li>Functional and non-functional testing (ISO25010)</li> <li>Behavior- and Data-Driven</li> </ul> <ul> <li>Flexible Environment/Architecture</li> <li>Augmented Requirements</li> <li>Complexity Reduction</li> </ul>"},{"location":"cel/","title":"comlet Embedded Library (cEL)","text":"<p>A cEL is a pure software library that extends the capability of the control environment and therefore the possibilities for test automation<sup>1</sup>. This can be done by providing interfaces to additional tools<sup>2</sup> or implementing additional protocol layer to communicate with the SUT<sup>3</sup>.</p> <p>Each cEL brings along a well-defined, low-level keyword library for Robot Framework on top of which new (user) keyword libraries may be implemented.</p> Examples for already available cEL <ul> <li>OCR Library: Extends test cases with the power of text recognition (by Tesseract)</li> <li>MAVLink Library: Extends test cases to communicate with airborne drones by MAVLink protocol</li> <li>SCPI Library: Extends test cases to be able to talk to various SCPI protocol   enabled hardware measurement devices</li> <li>ADB Library: Extends test cases to be able to talk to mobile devices by ADB</li> <li>Qt Squish Library: Extends test cases to be able to utilize Qt's Squish GUI testing tool</li> <li>MQTT Library: Extends test cases to be able to talk to IIoT devices via MQTT</li> <li>NETIO M2M JSON API Library: Extends test cases to be able to talk to NETIO devices   via their M2M JSON API</li> <li>Cleware USB Multiplexer Library: Extends test cases to be able to control USB Multiplexer by Cleware</li> <li>Public Transport Protocol Library: Extends test cases to be able to communicate with IBIS-IP<sup>4</sup> and ITxPT devices</li> <li>XLM Schema Validation Library: Extends test cases to be able to validate XML strings against an XML schema</li> </ul> Do you need a library implemented? <p>We are happy to help you out if you have the need for a particular library implementation. Feel free to contact our sales for further details.</p> <ol> <li> <p>Besides the already available Robot Framework ecosystem\u00a0\u21a9</p> </li> <li> <p>Those tools need to run in the control environment as well\u00a0\u21a9</p> </li> <li> <p>Either via hardware interface already available (only on premise) and/or cESD \u21a9</p> </li> <li> <p>VDV 301 Standard \u21a9</p> </li> </ol>"},{"location":"cesd/","title":"comlet Embedded Simulation Device (cESD)","text":"<p>A cESD is an embedded device, provided by comlet, that extends the control environment's capabilities to connect to and communicate with the SUT interfaces. It is used whenever a pure software library like a cEL is not enough (e.g., because the physical layer is missing or a certain timing is needed).</p>"},{"location":"cesd/#on-premise","title":"On Premise","text":"<p>With the on premise control environment, the cESD is mainly used to connect to the SUT by a low level hardware interface that is not available through the on premise host (or any kind of third-party adapter).</p> <p>Communication between the control environment and SUT is established by REST API that is unique and specialized for the respective hardware interface.</p> Examples for already available cESD <ul> <li>Relay: This cESD offers up to three relais to be opened and closed</li> <li>DAC: This cESD offers up to two 8 channel 12 Bit digital analog converter</li> </ul>"},{"location":"cesd/#cloud","title":"Cloud","text":"<p>For the cloud service control environment, the cESD is the bridge between the public network to the cloud service and the internal company network where the SUT is usually part of. Therefore, a cESD is also the only connection to the SUT's interfaces.</p> <p>The communication protocol in this context is MQTTS.</p> Do you need an interface engineered? <p>We are happy to help you out if you have the need for a particular interface implementation. Feel free to contact our sales for further details.</p>"},{"location":"cli/","title":"Command Line Interface","text":"<p><code>cetk-cli</code> is a headless, single-file command line interface delivered as platform-specific binary.</p> <p>Its purpose is to act as the sole interface for all supported control environments and supported executables. It makes it easy to be used manually in a local dev scenario as well as within a continuous testing context, automated by a CI/CD pipeline.</p> <p>Switching from running test automation locally or running encapsulated within a Docker container or even without the need for dedicated infrastructure within our cloud service, is as easy as changing an environment variable.</p> <p>It defines defaults for every detail of the test automation process to maintain test and product quality on enterprise level that is based on years of experience while being flexible enough to be adjusted to every project or product. </p> <p>Last but not least, it preserves the user experience of its supported executables as much as possible to also preserve the knowledge of user's already familiar with those.</p> <p>For general usage information, <code>cetk-cli</code> has a general help</p> <pre><code>cetk --help\n</code></pre> <p>as well as every sub-command</p> <pre><code>cetk [init|run] --help\n</code></pre>"},{"location":"cli/config/","title":"Configuration","text":"<p>Configuration can be given by three different entities:</p> <ul> <li>TOML file within <code>Source Home</code></li> <li>Environment variables</li> <li>CLI options</li> </ul> <p>The TOML file has the lowest prio and the CLI options the highest. The TOML file is good to define fallback defaults and is part of the <code>init</code> command. Environment variables are good to control CI/CD processes and are documented together with their respective global option.</p> <p>Note</p> <p><code>Source Home</code> can only be configured by CLI option.</p>"},{"location":"cli/default_options/","title":"Default Options","text":"<p>Each executable gets a carefully curated set of default options that is the result of many hours and projects of enterprise test automation.</p>"},{"location":"cli/default_options/#robot","title":"robot","text":""},{"location":"cli/default_options/#tags","title":"Tags","text":""},{"location":"cli/default_options/#not_ready","title":"<code>not_ready</code>","text":"<p>Tag to be used for test cases that shall be skipped, i.e., their result is ignored.</p>"},{"location":"cli/default_options/#no_logging","title":"<code>no_logging</code>","text":"<p>Tag for keywords that shall not log anything. This is useful if a keyword handles sensitive data like secrets.</p>"},{"location":"cli/default_options/#dont_run","title":"<code>dont_run</code>","text":"<p>Tag for test cases that shall not be run at all.</p>"},{"location":"cli/default_options/#test-case-randomization","title":"Test Case Randomization","text":"<p>Tests within test suites are randomized regarding their execution order. This is a proven way to identify unwanted side effects between test cases.</p>"},{"location":"cli/default_options/#run-empty-test-suites","title":"Run Empty Test Suites","text":"<p>If test cases are selected based on <code>--include</code> or <code>--exclude</code> this will make sure, test suites do not fail if no test case has been selected.</p>"},{"location":"cli/default_options/#reports-and-logs","title":"Reports and Logs","text":""},{"location":"cli/default_options/#cetk_xunitxml","title":"<code>cetk_xunit.xml</code>","text":"<p>Report in xUnit format that can be processed by most of the common CI/CD processors.</p>"},{"location":"cli/default_options/#cetk_loghtml","title":"<code>cetk_log.html</code>","text":"<p>Detailed log for every keyword called from every test case in every test suite in HTML format.</p>"},{"location":"cli/default_options/#cetk_reporthtml","title":"<code>cetk_report.html</code>","text":"<p>Overview/Summary report in HTML format that can be used as a dashboard.</p>"},{"location":"cli/default_options/#cetk_outputxml","title":"<code>cetk_output.xml</code>","text":"<p>XML output with all raw information/details in a machine-processable way.</p>"},{"location":"cli/default_options/#global-variables","title":"Global Variables","text":""},{"location":"cli/default_options/#resources","title":"<code>RESOURCES</code>","text":"<p>Global variable <code>${RESOURCES}</code> that can be used to reference the <code>resources</code> sub-folder from <code>Source Home</code>.</p>"},{"location":"cli/default_options/#default-output-directory","title":"Default Output Directory","text":"<p><code>Output Home</code> is set as default output directory where all the reports and logs are saved.</p>"},{"location":"cli/default_options/#additions-to-pythonpath","title":"Additions to <code>PYTHONPATH</code>","text":""},{"location":"cli/default_options/#source-homelibraries","title":"<code>&lt;Source Home&gt;/libraries</code>","text":"<p>Adds the <code>libraries</code> sub-folder from <code>Source Home</code> as an additional python path.</p>"},{"location":"cli/default_options/#log-level","title":"Log level","text":"<p>Configures the log level to enable <code>TRACE</code> logs but visually show only <code>INFO</code> level as default in HTML log. This makes sure no detail is missed if a test case fails, but the HTML is not overloaded with unnecessary details by default.</p>"},{"location":"cli/default_options/#rebot","title":"rebot","text":""},{"location":"cli/default_options/#tags_1","title":"Tags","text":""},{"location":"cli/default_options/#no_logging_1","title":"<code>no_logging</code>","text":"<p>Tag for keywords that shall not log anything. This is useful if a keyword handles sensitive data like secrets.</p>"},{"location":"cli/default_options/#dont_run_1","title":"<code>dont_run</code>","text":"<p>Tag for test cases that shall not be run at all.</p>"},{"location":"cli/default_options/#process-empty-test-suites","title":"Process Empty Test Suites","text":"<p>If test suites have no test cases, this will make sure <code>rebot</code> will not fail while processing.</p>"},{"location":"cli/default_options/#reports-and-logs_1","title":"Reports and Logs","text":""},{"location":"cli/default_options/#cetk_xunit_mergedxml","title":"<code>cetk_xunit_merged.xml</code>","text":"<p>Merged xUnit log.</p>"},{"location":"cli/default_options/#cetk_log_mergedhtml","title":"<code>cetk_log_merged.html</code>","text":"<p>Merged HTML log.</p>"},{"location":"cli/default_options/#cetk_report_mergedhtml","title":"<code>cetk_report_merged.html</code>","text":"<p>Merged HTML report.</p>"},{"location":"cli/default_options/#cetk_output_mergedxml","title":"<code>cetk_output_merged.xml</code>","text":"<p>Merged XML report (raw data).</p>"},{"location":"cli/default_options/#default-output-directory_1","title":"Default Output Directory","text":"<p><code>Output Home</code> is set as default output directory where all the merged reports and logs are saved.</p>"},{"location":"cli/default_options/#additions-to-pythonpath_1","title":"Additions to <code>PYTHONPATH</code>","text":""},{"location":"cli/default_options/#source-homelibraries_1","title":"<code>&lt;Source Home&gt;/libraries</code>","text":"<p>Adds the <code>libraries</code> sub-folder from <code>Source Home</code> as an additional python path.</p>"},{"location":"cli/default_options/#log-level_1","title":"Log level","text":"<p>Configures the log level to enable <code>TRACE</code> logs but visually show only <code>INFO</code> level as default in HTML log. This makes sure no detail is missed if a test case fails, but the HTML is not overloaded with unnecessary details by default.</p>"},{"location":"cli/default_options/#libdoc","title":"libdoc","text":""},{"location":"cli/default_options/#additions-to-pythonpath_2","title":"Additions to <code>PYTHONPATH</code>","text":""},{"location":"cli/default_options/#source-homelibraries_2","title":"<code>&lt;Source Home&gt;/libraries</code>","text":"<p>Adds the <code>libraries</code> sub-folder from <code>Source Home</code> as an additional python path.</p>"},{"location":"cli/default_options/#default-output-documentation-file","title":"Default Output Documentation File","text":"<p>Defines <code>&lt;Output Home&gt;/cetk_libdoc.html</code> as default output file and HTML format.</p>"},{"location":"cli/default_options/#testdoc","title":"testdoc","text":""},{"location":"cli/default_options/#tags_2","title":"Tags","text":""},{"location":"cli/default_options/#dont_run_2","title":"<code>dont_run</code>","text":"<p>Tag for test cases that shall not be run at all.</p>"},{"location":"cli/default_options/#default-output-documentation-file_1","title":"Default Output Documentation File","text":"<p>Defines <code>&lt;Output Home&gt;/cetk_testdoc.html</code> as default output file and HTML format.</p>"},{"location":"cli/default_options/#robocop","title":"robocop","text":""},{"location":"cli/default_options/#default-config","title":"Default config","text":"<p>Default config for linting that fits perfectly with the beautifier <code>robotidy</code>.</p>"},{"location":"cli/default_options/#default-output-report","title":"Default Output Report","text":"<p>Defines <code>&lt;Output Home&gt;/cetk_lint_report.txt</code> as default output report.</p>"},{"location":"cli/default_options/#robotidy","title":"robotidy","text":""},{"location":"cli/default_options/#default-config_1","title":"Default config","text":"<p>Default config for beautifying that fits perfectly with the linter <code>robocop</code>.</p>"},{"location":"cli/global_options/","title":"Global Options","text":"<p>Global options can be used before and for every sub-command but may not be processed by every control environment.</p> Example <pre><code>cetk [global option] [sub-command] ...\n</code></pre>"},{"location":"cli/global_options/#options","title":"Options","text":""},{"location":"cli/global_options/#-help-h","title":"<code>--help</code> / <code>-h</code>","text":"<p>Show help/usage details and exit.</p> <ul> <li>Default: None</li> <li>Supported control environment(s): All</li> <li>Environment variable(s): None</li> </ul>"},{"location":"cli/global_options/#-version","title":"<code>--version</code>","text":"<p>Show <code>cetk-cli</code>'s version and exit.</p> <ul> <li>Default: None</li> <li>Supported control environment(s): All</li> <li>Environment variable(s): None</li> </ul>"},{"location":"cli/global_options/#-project-name-str","title":"<code>--project-name</code> (str)","text":"<p>Set a project name used for Docker compose environment and its network.</p> <ul> <li>Default: <code>cetk</code></li> <li>Supported control environment(s): Native, Docker</li> <li>Environment variable(s): <code>CETK_PROJECT_NAME</code></li> </ul>"},{"location":"cli/global_options/#-source-home-s-path","title":"<code>--source-home</code> / <code>-s</code> (path)","text":"<p>Set the common <code>Source Home</code> path for all supported executables.</p> <ul> <li>Default: Current working directory</li> <li>Supported control environment(s): All</li> <li>Environment variable(s): None</li> </ul> Note <p>The control environment will set <code>CETK_SOURCE_HOME</code> during run-time, even though <code>Source Home</code> cannot be configured by environment variable (or TOML file).</p>"},{"location":"cli/global_options/#-output-home-o-path","title":"<code>--output-home</code> / <code>-o</code> (path)","text":"<p>Set the common <code>Output Home</code> path for all supported executables.</p> <ul> <li>Default: <code>&lt;Source Home&gt;/artifacts</code></li> <li>Supported control environment(s): All</li> <li>Environment variable(s): <code>CETK_OUTPUT_HOME</code></li> </ul> Note <p>The control environment will set <code>CETK_OUPUT_HOME</code> during run-time, regardless from which configuration entity <code>OUTPUT HOME</code> has been configured.</p>"},{"location":"cli/global_options/#-environment-choice","title":"<code>--environment</code> (choice)","text":"<p>Define the control environment to be used.</p> <ul> <li>Choices: <code>native</code>, <code>docker</code>, <code>cloud</code></li> <li>Default: <code>native</code></li> <li>Supported control environment(s): All</li> <li>Environment variable(s): <code>CETK_ENVIRONMENT</code></li> </ul> Note <p>The control environment will set <code>CETK_ENVIRONMENT</code> during run-time, regardless from which configuration entity <code>environment</code> has been configured.</p>"},{"location":"cli/global_options/#-verbose-v","title":"<code>--verbose</code> / <code>-v</code>","text":"<p>Show log messages in the terminal (stderr).</p> <ul> <li>Default: disabled</li> <li>Supported control environment(s): All</li> <li>Environment variable(s): <code>CETK_VERBOSE</code>, <code>CETK_ENABLE_VERBOSE</code><sup>1</sup></li> </ul>"},{"location":"cli/global_options/#-enable-file-logging","title":"<code>--enable-file-logging</code>","text":"<p>Enable logging into a file (for default file location, see <code>--log-file</code>)</p> <ul> <li>Default: enabled (by TOML configuration file)</li> <li>Supported control environment(s): All</li> <li>Environment variable(s): <code>CETK_FILE_LOGGING</code>, <code>CETK_ENABLE_FILE_LOGGING</code><sup>1</sup></li> </ul>"},{"location":"cli/global_options/#-log-file-file-path","title":"<code>--log-file</code> (file path)","text":"<p>Specify different path/file name for the log file (if enabled).</p> <ul> <li>Default: <code>&lt;Output Home&gt;/cetk.log</code></li> <li>Supported control environment(s): All</li> <li>Environment variable(s): <code>CETK_LOG_FILE</code></li> </ul>"},{"location":"cli/global_options/#-compose-file-file-path","title":"<code>--compose-file</code> (file path)","text":"<p>Docker compose file to be used for Docker compose environment. Option can be used several times.</p> <ul> <li>Default: None</li> <li>Supported control environment(s): native, docker</li> <li>Environment variable(s): <code>CETK_COMPOSE_FILES</code></li> </ul>"},{"location":"cli/global_options/#-compose-dotenv-file-file-path","title":"<code>--compose-dotenv-file</code> (file path)","text":"<p>Dotenv (<code>.env</code>) file passed to Docker compose environment.</p> <ul> <li>Default: None</li> <li>Supported control environment(s): native, docker</li> <li>Environment variable(s): <code>CETK_COMPOSE_DOTENV_FILE</code></li> </ul>"},{"location":"cli/global_options/#-compose-executable-name-str","title":"<code>--compose-executable-name</code> (str)","text":"<p>Name of the executable to be used to control <code>compose</code>.</p> <ul> <li>Default: <code>docker</code></li> <li>Supported control environment(s): native, docker</li> <li>Environment variable(s): <code>CETK_COMPOSE_EXECUTABLE_NAME</code></li> </ul>"},{"location":"cli/global_options/#-compose-executable-path-path","title":"<code>--compose-executable-path</code> (path)","text":"<p>Alternative search path for executable that controls <code>compose</code>.</p> <ul> <li>Default: System/User <code>PATH</code></li> <li>Supported control environment(s): native, docker</li> <li>Environment variable(s): <code>CETK_COMPOSE_EXECUTABLE_PATH</code></li> </ul>"},{"location":"cli/global_options/#-compose-verbose","title":"<code>--compose-verbose</code>","text":"<p>Enable verbose mode for compose executable</p> <ul> <li>Default: disabled</li> <li>Supported control environment(s): native, docker</li> <li>Environment variable(s): <code>CETK_COMPOSE_VERBOSE</code>, <code>CETK_COMPOSE_ENABLE_VERBOSE</code><sup>1</sup></li> </ul>"},{"location":"cli/global_options/#-docker-image-str","title":"<code>--docker-image</code> (str)","text":"<p>The name/tag of the control environment Docker image.</p> <ul> <li>Default: None</li> <li>Supported control environment(s): docker</li> <li>Environment variable(s): <code>CETK_DOCKER_IMAGE</code></li> </ul> Note <p>The docker control environment will set <code>CETK_DOCKER_IMAGE</code> during run-time, regardless from which configuration entity <code>docker image</code> has been configured.</p>"},{"location":"cli/global_options/#-cloud-api-key-str","title":"<code>--cloud-api-key</code> (str)","text":"<p>API key to authorize against cETK cloud service. This key can be obtained from the cloud service \"developer\" portal as a self-service.</p> <ul> <li>Default: None</li> <li>Supported control environment(s): cloud</li> <li>Environment variable(s): <code>CETK_CLOUD_API_KEY</code></li> </ul>"},{"location":"cli/global_options/#-cloud-customer-id-str","title":"<code>--cloud-customer-id</code> (str)","text":"<p>Customer ID to access customer-specific cETK cloud service API. This ID is given by comlet upon valid/active subscription.</p> <ul> <li>Default: None</li> <li>Supported control environment(s): cloud</li> <li>Environment variable(s): <code>CETK_CLOUD_CUSTOMER_ID</code></li> </ul>"},{"location":"cli/global_options/#-cloud-add-upload-path-path","title":"<code>--cloud-add-upload-path</code> (path)","text":"<p>Additional <code>Output Home</code> or <code>Temp Home</code> path from which files are uploaded to cETK cloud service as sources (not filtered and non-recursive). Option can be given multiple times.</p> <ul> <li>Default: None</li> <li>Supported control environment(s): cloud</li> <li>Environment variable(s): <code>CETK_CLOUD_ADD_UPLOAD_PATHS</code></li> </ul>"},{"location":"cli/global_options/#-cloud-force-upload","title":"<code>--cloud-force-upload</code>","text":"<p>Forces upload of sources to cETK cloud service \u2014 even if they exist.</p> <ul> <li>Default: disabled</li> <li>Supported control environment(s): cloud</li> <li>Environment variable(s): <code>CETK_CLOUD_FORCE_UPLOAD</code>, <code>CETK_CLOUD_ENABLE_FORCE_UPLOAD</code><sup>1</sup></li> </ul> <ol> <li> <p>The <code>ENABLE</code> environment variable just needs to be defined, its value does not matter to enable the option.   Whereas the \"normal\" variable needs to have a truth-y or false-y value\u00a0\u21a9\u21a9\u21a9\u21a9</p> </li> </ol>"},{"location":"cli/init/","title":"Initializing Source Home","text":"<pre><code>cetk init\n</code></pre> <p>This will add the common folder structure, incl. a TOML configuration file with defaults and the cloud service upload allowlist file to the current working directory.</p> <p>Note</p> <p>Init will overwrite existing files</p>"},{"location":"cli/init/#options","title":"Options","text":""},{"location":"cli/init/#-help-h","title":"<code>--help</code> / <code>-h</code>","text":"<p>Show the help message and exit.</p>"},{"location":"cli/init/#-path-p","title":"<code>--path</code> / <code>-p</code>","text":"<p>Path to init <code>Source Home</code>. Defaults to current working directory.</p>"},{"location":"cli/init/#-config-only","title":"<code>--config-only</code>","text":"<p>Generate/Overwrite TOML configuration file and cloud upload allowlist only.</p>"},{"location":"cli/install/","title":"Installing cetk-cli","text":"<p><code>cetk-cli</code> can be installed as Python wheel by its name \"cetk-cli-bin\" (e.g., by pip). The wheel is platform-specific and compatible with every Python 3 version.</p> <p>To run <code>cetk-cli</code>, Python is not needed. The Python wheel is just the transportation vehicle. Of course, upon request, the binary can also be delivered without the wheel wrapping.</p> Active cloud subscription needed <p>To make use of the cloud control environment, an active cloud service subscription is needed. Feel free to contact our sales for further details.</p>"},{"location":"cli/install/#system-requirements","title":"System Requirements","text":"<ul> <li>Windows 10/11 (AMD64)</li> <li>Linux (AMD64/ARM64) - glibc 2.17+<sup>1</sup></li> <li>macOS (Apple Silicon) &gt;= Ventura (Version 13)</li> </ul> <ol> <li> <p>Tested under Ubuntu 20.04 LTS onwards, Debian 11.3.0 onwards\u00a0\u21a9</p> </li> </ol>"},{"location":"cli/run/","title":"Running Executables","text":"<pre><code>cetk run [supported executable] ...\n</code></pre> <p>Since this is the default sub-command of <code>cetk-cli</code>, <code>run</code> can also be omitted:</p> <pre><code>cetk [supported executable] ...\n</code></pre>"},{"location":"cli/run/#options","title":"Options","text":"<p>The options and arguments after the given supported executable (represented as <code>...</code> above) are the same as the executable offers when run by itself.</p> Example to print the usage information of <code>robot</code> <pre><code>cetk robot --help\n</code></pre>"},{"location":"cli/thirdparty_oss/","title":"Thirdparty OSS","text":"<p>A list of third-party OSS software used to build this application (incl. a reference to their license)</p> <ul> <li>Python 3.12 - License</li> <li>python-dotenv - License</li> <li>packaging - License</li> <li>findpython - License</li> <li>tomlkit - License</li> <li>cryptography - License</li> <li>platformdirs - License</li> <li>httpx - License</li> <li>tenacity - License</li> <li>pybreaker - License</li> <li>pathspec - License</li> </ul>"},{"location":"control_env/","title":"Control Environments","text":"<p>Embedded TestKit's control environment is a logical entity that is able to run supported executables for test automation and in different encapsulation flavors.</p> <p>It takes <code>Source Home</code> as input and <code>Output Home</code> as output folder for every run executable. Connections to the SUT are established either by the on premise host interfaces and/or by network via cESD<sup>2</sup>. </p>"},{"location":"control_env/#supported-executables","title":"Supported Executables","text":"<ul> <li>Robot Framework Version 6/7<ul> <li>robot, rebot, testdoc, libdoc</li> </ul> </li> <li>Tidy Version 4.x<ul> <li>robotidy</li> </ul> </li> <li>Robocop Version 5.x<ul> <li>robocop</li> </ul> </li> </ul>"},{"location":"control_env/#encapsulation-flavors","title":"Encapsulation Flavors","text":"<ul> <li>Native (On Premise)</li> <li>Docker (On Premise)</li> <li>Cloud (Testing as a Service)</li> </ul>"},{"location":"control_env/#environment-variables","title":"Environment Variables","text":"<p>The Following environment variables are set and available during the execution with cetk-cli<sup>5</sup>:</p>"},{"location":"control_env/#on-the-host","title":"On The Host","text":"<p>As in: \"The host that is using cetk-cli to run supported executables\" </p> <ul> <li><code>CETK_SOURCE_HOME</code>: absolute path to <code>Source Home</code></li> <li><code>CETK_SOURCE_HOME_POSIX</code>: absolute path to <code>Source Home</code> in posix format<sup>1</sup><sup>3</sup></li> <li><code>CETK_OUTPUT_HOME</code>: absolute path to <code>Output Home</code></li> <li><code>CETK_OUTPUT_HOME_POSIX</code>: absolute path to <code>Output Home</code> in posix format<sup>1</sup><sup>4</sup></li> <li><code>CETK_TMP_HOME</code>: absolute path to <code>Temp Home</code></li> <li><code>CETK_ENVIRONMENT</code>: one of the following: <code>native</code>, <code>docker</code>, <code>cloud</code></li> </ul>"},{"location":"control_env/#within-control-environment","title":"Within Control Environment","text":"<ul> <li><code>CETK_SOURCE_HOME</code>: absolute path to <code>Source Home</code></li> <li><code>CETK_OUTPUT_HOME</code>: absolute path to <code>Output Home</code></li> <li><code>CETK_TMP_HOME</code>: absolute path to <code>Temp Home</code></li> <li><code>CETK_ENVIRONMENT</code>: one of the following: <code>native</code>, <code>docker</code>, <code>cloud</code></li> </ul> <ol> <li> <p>Only available for on premise control environments\u00a0\u21a9\u21a9</p> </li> <li> <p>Connections via cESD are the only ones currently supported by the cloud control environment\u00a0\u21a9</p> </li> <li> <p>If the host platform is already posix (e.g., Linux) then this is the same as <code>CETK_SOURCE_HOME</code> \u21a9</p> </li> <li> <p>If the host platform is already posix (e.g., Linux) then this is the same as <code>CETK_OUTPUT_HOME</code> \u21a9</p> </li> <li> <p>If any of those variables have been used to configure cetk-cli, they may be updated during execution\u00a0\u21a9</p> </li> </ol>"},{"location":"control_env/cloud/","title":"Control Environment: Cloud","text":"<p>This control environment encapsulates and delegates the execution of supported executables to a dedicated cloud service provided by comlet.</p> <p>In contrast to the on premise control environments, this configuration only needs cetk-cli installed and configured for the cloud service to be used.</p> Active cloud subscription needed <p>To make use of this control environment, an active subscription is needed. Feel free to contact our sales for further details.</p>"},{"location":"control_env/cloud/#system-requirements","title":"System Requirements","text":"<p>This control environment runs on every platform supported by cetk-cli:</p> <ul> <li>Windows 10/11 (AMD64)</li> <li>Linux (AMD64/ARM64) - glibc 2.17+<sup>1</sup></li> <li>macOS (Apple Silicon) &gt;= Ventura (Version 13)</li> </ul>"},{"location":"control_env/cloud/#environment-variables","title":"Environment Variables","text":"<p>See the common environment variables set.</p>"},{"location":"control_env/cloud/#configuration","title":"Configuration","text":""},{"location":"control_env/cloud/#mandatory","title":"Mandatory","text":"<ul> <li><code>--environment=cloud</code></li> <li><code>--cloud-api-key</code>: API Key that can be obtained from the cloud service's self-service portal</li> <li><code>--cloud-customer-id</code>: Customer ID that is given by comlet upon active cloud subscription<sup>5</sup></li> </ul> Tip <p>See cetk-cli's global options for further details.</p>"},{"location":"control_env/cloud/#sources-upload","title":"Sources Upload","text":"<p>cetk-cli will upload <code>Source Home</code> to the cloud service before executing any supported executable. It will also evaluate a hash based on the sources to uniquely identify them and skip upload if sources already exist<sup>3</sup>.</p> Tip <p>If an upload shall be forced even though the sources already exist, the global option <code>--cloud-force-upload</code> may be used.</p> <p>If additional files from <code>Output Home</code> or <code>Temp Home</code> shall be uploaded, the global option <code>--cloud-add-upload-path</code> may be used. Files within this path are not filtered by the allowlist but also not recursively considered.  </p>"},{"location":"control_env/cloud/#filter-sources-for-upload","title":"Filter Sources for Upload","text":"<p>To prevent uncontrolled upload of any file within <code>Source Home</code>, cetk-cli uses an allowlist to filter folders and files based on their relative path within <code>Source Home</code><sup>4</sup>.</p> <p>The default allowlist is part of the <code>init</code> command and may be adjusted to project's needs.</p> <p>See <code>Source Home</code> for further details.</p>"},{"location":"control_env/cloud/#output-download","title":"Output Download","text":"<p>All artifacts/reports that are produced by any supported executable are downloaded from the cloud service and stored within the local Home Folders depending on their original configuration.</p>"},{"location":"control_env/cloud/#bridging-the-cloud-service-with-the-local-sut","title":"Bridging the Cloud Service with the Local SUT","text":"<p>To not expose the SUT to public (Internet) access, the cloud service uses cESD(s) to act as a bridge (aka gateway) between the cloud service and the (local) SUT. It communicates via authenticated and encrypted MQTT v5 over TLS (MQTTS) with the cloud service. The necessary keys are securely stored on and specific to the cESD per customer.</p>"},{"location":"control_env/cloud/#security-considerations","title":"Security Considerations","text":"<p>Every request to the cloud service is encrypted (TLS 1.2), authenticated against the API key and authorized within the cloud service together with the customer ID.</p> <p>Files uploaded to the cloud service additionally use SHA256 hashes for integrity.</p> <ol> <li> <p>Tested under Ubuntu 20.04 LTS onwards, Debian 11.3.0 onwards\u00a0\u21a9</p> </li> <li> <p>Tested under Ubuntu 20.04 LTS onwards, Debian 11.3.0 onwards\u00a0\u21a9</p> </li> <li> <p>Comparable to the commit hash of git\u00a0\u21a9</p> </li> <li> <p>Allowlist is defined in git wildmatch patterns\u00a0\u21a9</p> </li> <li> <p>Alongside access to the cloud service's self-service portal\u00a0\u21a9</p> </li> </ol>"},{"location":"control_env/docker/","title":"Control Environment: Docker (On Premise)","text":"<p>This control environment encapsulates and delegates the execution of supported executables to a Linux Docker container as part of a Docker compose environment.</p>"},{"location":"control_env/docker/#system-requirements","title":"System Requirements","text":"<p>A Docker engine<sup>1</sup> and Compose v2 cli-plugin<sup>2</sup> are expected to be installed and usable by the current user. This can be achieved by using Docker Desktop, Ranger Desktop, installing the Docker engine natively, using Podman<sup>3</sup> etc.</p> <p>This control environment runs on every platform supported by cetk-cli:</p> <ul> <li>Windows 10/11 (AMD64)</li> <li>Linux (AMD64/ARM64) - glibc 2.17+<sup>4</sup></li> <li>macOS (Apple Silicon) &gt;= Ventura (Version 13)</li> </ul>"},{"location":"control_env/docker/#environment-variables","title":"Environment Variables","text":"<p>See the common environment variables set.</p> <p>Additionally, the following environment variables are set:</p> <ul> <li><code>CETK_DOCKER_IMAGE</code>: The Docker image representing the control environment</li> </ul>"},{"location":"control_env/docker/#volumes","title":"Volumes","text":"<p>During execution, the following local paths are mounted as volumes into the Docker container representing the control environment:</p> <ul> <li><code>Source Home</code></li> <li><code>Output Home</code></li> <li><code>Temp Home</code></li> <li>Current working directory</li> </ul>"},{"location":"control_env/docker/#configuration","title":"Configuration","text":""},{"location":"control_env/docker/#mandatory","title":"Mandatory","text":"<ul> <li><code>--environment=docker</code></li> <li><code>--docker-image</code>: Name of the Docker image representing the control environment</li> </ul>"},{"location":"control_env/docker/#optional","title":"Optional","text":"<ul> <li><code>--compose-file</code>: Additional compose files defining additional services</li> <li><code>--compose-dotenv-file</code>: Path to a dotenv file passed to Docker compose</li> </ul> Tip <p>See cetk-cli's global options for further details.</p>"},{"location":"control_env/docker/#docker-image","title":"Docker Image","text":"<p>A pre-built Linux Docker image is provided that can be stored locally or within a Docker registry. This image can also be used as a base image for a project-specific adjustments.</p>"},{"location":"control_env/docker/#docker-compose-service","title":"Docker Compose Service","text":"<p>The service which is part of the Docker compose environment, in which the supported executables are run, is called <code>embedded_testkit</code>.</p>"},{"location":"control_env/docker/#security-considerations","title":"Security Considerations","text":"<p>For security reasons, the executables within the control environment are run by a non-privileged user that gets the same User and Group ID than the local user<sup>5</sup>. Additionally, it is made sure that the files read from and written to the volumes have the same access control rights than the local user only. There is no root/privileged user involved that may leak into the host even when running the Docker engine service as root.</p> <ol> <li> <p>Tested with version 20.10.6 onwards\u00a0\u21a9</p> </li> <li> <p>Tested with version 2.6.0 onwards\u00a0\u21a9</p> </li> <li> <p>Make sure to configure the <code>compose-executable-name</code> CLI option to <code>podman</code> \u21a9</p> </li> <li> <p>Tested under Ubuntu 20.04 LTS onwards, Debian 11.3.0 onwards\u00a0\u21a9</p> </li> <li> <p>On non-posix systems it falls back to a default value since it does not matter\u00a0\u21a9</p> </li> </ol>"},{"location":"control_env/native/","title":"Control Environment: Native (On Premise)","text":"<p>This control environment has the least form of encapsulation and assumes that the supported executables are installed and available within the system's or user's path.</p> <p>This can be anything from installing them globally, within a active Python virtualenv, an active Conda environment, within a Virtual Machine, even a Docker image (in which cetk-cli is also installed to), etc.</p> <p>Alternatively, the Python interpreter that has the supported executables installed, can be selected manually by setting <code>CETK_PYTHON</code> environment variable.</p>"},{"location":"control_env/native/#system-requirements","title":"System Requirements","text":"<p>This control environment runs on every platform supported by cetk-cli:</p> <ul> <li>Windows 10/11 (AMD64)</li> <li>Linux (AMD64/ARM64) - glibc 2.17+<sup>1</sup></li> <li>macOS (Apple Silicon) &gt;= Ventura (Version 13)</li> </ul>"},{"location":"control_env/native/#environment-variables","title":"Environment Variables","text":"<p>See the common environment variables set.</p>"},{"location":"control_env/native/#configuration","title":"Configuration","text":"<ul> <li><code>--environment=native</code> (default value)</li> </ul> Tip <p>See cetk-cli's global options for further details.</p>"},{"location":"control_env/native/#option-start-a-docker-compose-environment","title":"Option: Start a Docker Compose Environment","text":"<p>If needed, the native control environment supports starting and stopping a Docker compose environment automatically that test suites may utilize.</p> <p>A Docker engine<sup>2</sup> and Compose v2 cli-plugin<sup>3</sup> are expected to be installed and usable by the current user. This can be achieved by using Docker Desktop, Ranger Desktop, installing the Docker engine natively, using Podman<sup>4</sup> etc.</p> Difference to the Docker compose environment started by docker control environment <p>The difference is that the test execution is not part of the Docker compose network (since executed natively). Whereas the test execution with the Docker control environment is part of the Docker compose network as a dedicated service.</p> <p>For configuration, see the Docker control environment configuration section.</p> <ol> <li> <p>Tested under Ubuntu 20.04 LTS onwards, Debian 11.3.0 onwards\u00a0\u21a9</p> </li> <li> <p>Tested with version 20.10.6 onwards\u00a0\u21a9</p> </li> <li> <p>Tested with version 2.6.0 onwards\u00a0\u21a9</p> </li> <li> <p>Make sure to configure the <code>compose-executable-name</code> CLI option to <code>podman</code> \u21a9</p> </li> </ol>"},{"location":"home_folder/","title":"Home Folder","text":"<p>The concept of <code>Home Folder</code> is a folder/file hierarchy with an expected/pre-defined structure that is externally managed and delivered into the control environment.</p> <p>Externally managed means that those folders are not part of the control environment itself. This can vary from  local/temporary folder to folder under the control of (de-)centralized managed versioning control systems like <code>git</code>.</p> Important <p>Test sources and their data are only allowed to be executed from <code>Source Home</code> or <code>Output Home</code>.</p> Important <p>Outputs/Artifacts are only allowed to be written to <code>Source Home</code>, <code>Output Home</code> or <code>Temp Home</code>.</p>"},{"location":"home_folder/output_home/","title":"Output Home","text":"<p><code>Ouput Home</code> is the base folder where by default all artifacts from the executables are saved to.</p> <p>Note</p> <p>If not given, <code>Output Home</code> defaults to <code>&lt;Source Home&gt;/artifacts</code>.</p>"},{"location":"home_folder/source_home/","title":"Source Home","text":"<p><code>Source Home</code> provides all necessary test data and test sources to be executed within the control environment. </p> Tip <p>To build the expected default structure of <code>Source Home</code>, <code>cetk-cli</code>'s <code>init</code> command may be used.</p>"},{"location":"home_folder/source_home/#expected-folderfile-structure","title":"Expected Folder/File Structure","text":"<p>The default structure of <code>Source Home</code> looks like this:</p> <pre><code>config/\ndocker/\nlibraries/\nresources/\ntest_suites/\n.cloud_upload_allowlist\ncetk.toml\n</code></pre>"},{"location":"home_folder/source_home/#config-subfolder","title":"Config Subfolder","text":"<p>This subfolder is optional and may hold project-specific configuration files for supported executables.</p> <p>Note</p> <p>If no project-specific configuration files are used, <code>cetk-cli</code> already loads default configs based on many years of best practice usage for the executables <code>robocop</code> and <code>robotidy</code>. </p>"},{"location":"home_folder/source_home/#docker-subfolder","title":"Docker Subfolder","text":"<p>This subfolder is optional and may hold project-specific Docker compose files to be used by the on premise Control Environments. </p>"},{"location":"home_folder/source_home/#libraries-subfolder","title":"Libraries Subfolder","text":"<p>This subfolder is optional and may hold additional (Python) libraries that are needed and loaded during test execution.</p> <p>Note</p> <p>The executables <code>robot</code>, <code>libdoc</code> and <code>rebot</code> add the path to this subfolder automatically to <code>PYTHONPATH</code> during execution. </p>"},{"location":"home_folder/source_home/#resources-subfolder","title":"Resources Subfolder","text":"<p>This subfolder is optional and may contain resources such as test data or keyword libraries to be used by the test suites.</p> <p>Note</p> <p>During test execution, the global Robot Framework variable <code>${RESOURCES}</code> is available pointing to the path of this subfolder.</p>"},{"location":"home_folder/source_home/#test-suites-subfolder","title":"Test Suites Subfolder","text":"<p>Within this subfolder, the test suites shall be placed. The test designer is free to choose any folder hierarchy within this subfolder that deems necessary.</p>"},{"location":"home_folder/source_home/#allowlist-file-for-cloud-upload","title":"Allowlist File for Cloud Upload","text":"<p>File name: <code>.cloud_upload_allowlist</code></p> <p>This file is only considered for the cloud control environment and controls which folder and files from <code>Source Home</code> are actually taken into account to be uploaded.</p> <p>Its format is similar to the one from git's wildmatch.</p> <p>It defaults basically to allow only files from the expected folders and additionally exclude non-testing relevant files by their extensions:</p> Example <pre><code>test_suites/**\nresources/**\nlibraries/**\nconfig/**\n\n!__pycache__/\n!*.py[cod]\n!*.pyo\n!*.pyd\n!.env/\n!.venv/\n!.conda/\n!.conda_env/\n!.git/\n!*.git\n!*.gitignore\n!*.gitmodules\n</code></pre> <p>Note</p> <p>If not defined, <code>cetk-cli</code> uses a default one as it is generated by <code>cetk-cli</code>'s <code>init</code> command.</p>"},{"location":"home_folder/source_home/#configuration-file-for-cetk-cli","title":"Configuration File for <code>cetk-cli</code>","text":"<p>File name: <code>cetk.toml</code></p> <p>This configuration file has the lowest priority of all available configuration sources. It's a good way to define <code>cetk-cli</code>'s and its utilized control environment's default behavior.</p> <p>Alternatively, the <code>[tool.cetk]</code> TOML table can also be integrated into an existing <code>pyproject.toml</code> file. But as along as a <code>cetk.toml</code> exists, it will take precedence.</p> Example <pre><code>[tool.cetk]\nenvironment = \"native\"\nverbose = false\nenable_file_logging = false\n</code></pre>"},{"location":"home_folder/temp_home/","title":"Temp Home","text":"<p><code>Temp Home</code> is a platform- and user-specific folder that can be used to save interim output results to before finally saving them into <code>Output Home</code>.</p> <p>During running a supported executable within a control environment, this folder can be read by the environment variable <code>CETK_TMP_HOME</code>.</p>"},{"location":"home_folder/temp_home/#path-evaluation","title":"Path Evaluation","text":"<p>Path evaluation for <code>Temp Home</code> is done in the following prio (top/down) and order (left/right):</p> <ul> <li>Environment variables<ul> <li><code>TMPDIR</code>, <code>TEMP</code>, <code>TMP</code></li> </ul> </li> <li>Platform-specific directories<ul> <li>On Windows <code>C:\\TEMP</code>, <code>C:\\TMP</code>, <code>\\TEMP</code> or <code>\\TMP</code></li> <li>On all other platforms <code>/tmp</code>, <code>/var/tmp</code> or <code>/usr/tmp</code></li> </ul> </li> <li>Current working directory</li> </ul>"},{"location":"snippets/cetk_cli_sys_req/","title":"Cetk cli sys req","text":"<ul> <li>Windows 10/11 (AMD64)</li> <li>Linux (AMD64/ARM64) - glibc 2.17+<sup>1</sup></li> <li>macOS (Apple Silicon) &gt;= Ventura (Version 13)</li> </ul> <ol> <li> <p>Tested under Ubuntu 20.04 LTS onwards, Debian 11.3.0 onwards\u00a0\u21a9</p> </li> </ol>"},{"location":"snippets/control_env_sys_req/","title":"Control env sys req","text":"<p>This control environment runs on every platform supported by cetk-cli:</p> <ul> <li>Windows 10/11 (AMD64)</li> <li>Linux (AMD64/ARM64) - glibc 2.17+<sup>1</sup></li> <li>macOS (Apple Silicon) &gt;= Ventura (Version 13)</li> </ul> <ol> <li> <p>Tested under Ubuntu 20.04 LTS onwards, Debian 11.3.0 onwards\u00a0\u21a9</p> </li> </ol>"},{"location":"snippets/docker_req/","title":"Docker req","text":"<p>A Docker engine<sup>1</sup> and Compose v2 cli-plugin<sup>2</sup> are expected to be installed and usable by the current user. This can be achieved by using Docker Desktop, Ranger Desktop, installing the Docker engine natively, using Podman<sup>3</sup> etc.</p> <ol> <li> <p>Tested with version 20.10.6 onwards\u00a0\u21a9</p> </li> <li> <p>Tested with version 2.6.0 onwards\u00a0\u21a9</p> </li> <li> <p>Make sure to configure the <code>compose-executable-name</code> CLI option to <code>podman</code> \u21a9</p> </li> </ol>"}]}